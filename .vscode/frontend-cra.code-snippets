{
  "react-function-component-skeleton": {
    "scope": "typescriptreact",
    "prefix": "rfc",
    "body": [
      "import { FC } from 'react'",
      "import { Root } from './styled'",
      "",
      "type ${TM_FILENAME_BASE}$1Props = {",
      "  className?: string",
      "}",
      "",
      "export const ${TM_FILENAME_BASE}$1: FC<${TM_FILENAME_BASE}$1Props> = ({ className }) => {",
      "  return <Root className={className}>${TM_FILENAME_BASE}$1</Root>",
      "}",
      ""
    ]
  },
  "react-hook-skeleton": {
    "scope": "typescript",
    "prefix": "hook",
    "body": [
      "type ${TM_FILENAME_BASE}$1Props = {",
      "",
      "}",
      "",
      "export const ${TM_FILENAME_BASE}$1 = ({}: ${TM_FILENAME_BASE}$1Props) => {",
      "  return {}",
      "}",
      ""
    ]
  },
  "react-styled-components-skeleton": {
    "scope": "typescript",
    "prefix": "rsc",
    "body": [
      "import styled from 'styled-components'",
      "",
      "export const Root = styled.div``"
    ]
  },
  "api-query-skeleton": {
    "scope": "typescript",
    "prefix": "api-query",
    "body": [
      "import { commonAxios, CommonResponse } from 'apis/common'",
      "import { AxiosResponse } from 'axios'",
      "",
      "type Props = {",
      "",
      "}",
      "",
      "type Type = {",
      "",
      "}",
      "",
      "export const ${TM_FILENAME_BASE} = async (value: Props) => {",
      "  return commonAxios.get('$1', value).then((res: AxiosResponse<CommonResponse<Type>>) => {",
      "    return res",
      "  })",
      "}"
    ]
  },
  "api-mutation-skeleton": {
    "scope": "typescript",
    "prefix": "api-mutation",
    "body": [
      "import { commonAxios, CommonResponse } from 'apis/common'",
      "import { AxiosResponse } from 'axios'",
      "",
      "type Props = {",
      "",
      "}",
      "",
      "type Type = {",
      "",
      "}",
      "",
      "export const ${TM_FILENAME_BASE} = async (value: Props) => {",
      "  return commonAxios.post('$1', value, {}).then((res: AxiosResponse<CommonResponse<Type>>) => {",
      "    return res",
      "  })",
      "}"
    ]
  }
}
